{"version":3,"sources":["components/Navbar.js","redux/actions/actionTypes.js","pages/Home.js","pages/About.js","components/Content.js","redux/reducers/navbarReducer.js","redux/reducers/rootReducer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","dispatch","useDispatch","className","exact","to","id","onClick","type","window","innerWidth","Home","About","Content","path","component","navbarReducer","state","action","navbar","document","querySelector","navbarNav","classList","toggle","rootReducer","combineReducers","App","store","createStore","applyMiddleware","logger","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAKaA,EAAS,WACpB,IAAMC,EAAWC,cACjB,OACE,4BAAQC,UAAU,cAChB,yBAAKA,UAAU,8BACb,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAI,IAAKF,UAAU,gBAAlC,SAGA,yBACEG,GAAG,YACHH,UAAU,sBACVI,QAAS,kBAAMN,ECbhB,CACLO,KAJyB,qBDkBrB,yBAAKL,UAAU,+BACb,kBAAC,IAAD,CACEC,OAAK,EACLC,GAAI,IACJF,UAAU,mBACVI,QAAS,WACPE,OAAOC,WAAa,KAAOT,ECrBhC,CACLO,KAJyB,oBDmBnB,QAUA,kBAAC,IAAD,CACEH,GAAI,SACJF,UAAU,WACVI,QAAS,WACPE,OAAOC,WAAa,KAAOT,EC9BhC,CACLO,KAJyB,oBD6BnB,a,OEnBKG,MARf,WACE,OACE,yBAAKL,GAAG,QACN,wBAAIH,UAAU,aAAd,qBCKSS,MARf,WACE,OACE,yBAAKN,GAAG,SACN,wBAAIH,UAAU,aAAd,sBCAOU,EAAU,WACrB,OACE,yBAAKP,GAAG,UAAUH,UAAU,aAC1B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACU,KAAM,IAAKC,UAAWJ,IACnC,kBAAC,IAAD,CAAOG,KAAM,SAAUC,UAAWH,IAClC,kBAAC,IAAD,CAAUE,KAAM,IAAKT,GAAI,SCIlBW,EAbO,WAA4B,IAA3BC,EAA0B,wDAAXC,EAAW,uCACzCC,EAASC,SAASC,cAAc,WAChCC,EAAYF,SAASC,cAAc,eACzC,OAAQH,EAAOV,MACb,IJNyB,gBISvB,OAFAW,EAAOI,UAAUC,OAAO,UACxBF,EAAUC,UAAUC,OAAO,WACnBP,EACV,QACE,OAAOA,ICPEQ,EAFKC,YAAgB,CAAEV,kB,QCsBvBW,MAdf,WACE,IAAMC,EAAQC,YAAYJ,EAAaK,YAAgBC,WACvD,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,yBAAKzB,UAAU,uBACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UCLU6B,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4857c0f3.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { toggleNavbar } from '../redux/actions/actionTypes'\r\n\r\nexport const Navbar = () => {\r\n  const dispatch = useDispatch()\r\n  return (\r\n    <header className='App-header'>\r\n      <nav className='navbar navbar-dark bg-dark'>\r\n        <NavLink exact to={'/'} className='navbar-brand'>\r\n          Brand\r\n        </NavLink>\r\n        <div\r\n          id='hamburger'\r\n          className='navbar-toggler-icon'\r\n          onClick={() => dispatch(toggleNavbar())}\r\n        />\r\n        <div className='navbar-nav navbar-expand-md'>\r\n          <NavLink\r\n            exact\r\n            to={'/'}\r\n            className='nav-link mr-xl-3'\r\n            onClick={() => {\r\n              window.innerWidth < 768 && dispatch(toggleNavbar())\r\n            }}\r\n          >\r\n            Home\r\n          </NavLink>\r\n          <NavLink\r\n            to={'/about'}\r\n            className='nav-link'\r\n            onClick={() => {\r\n              window.innerWidth < 768 && dispatch(toggleNavbar())\r\n            }}\r\n          >\r\n            About\r\n          </NavLink>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  )\r\n}\r\n","export const TOGGLE_NAVBAR = 'TOGGLE_NAVBAR'\n\nexport const toggleNavbar = () => {\n  return {\n    type: TOGGLE_NAVBAR,\n  }\n}\n","import React from 'react'\r\n\r\nfunction Home() {\r\n  return (\r\n    <div id='home'>\r\n      <h2 className='display-3'>Home lives here</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n  return (\r\n    <div id='about'>\r\n      <h2 className='display-3'>About lives here</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import React from 'react'\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\nimport Home from '../pages/Home'\r\nimport About from '../pages/About'\r\n\r\nexport const Content = () => {\r\n  return (\r\n    <div id='content' className='container'>\r\n      <Switch>\r\n        <Route exact path={'/'} component={Home} />\r\n        <Route path={'/about'} component={About} />\r\n        <Redirect path={'*'} to={'/'} />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n","import { TOGGLE_NAVBAR } from '../actions/actionTypes'\r\n\r\nconst navbarReducer = (state = false, action) => {\r\n  const navbar = document.querySelector('.navbar')\r\n  const navbarNav = document.querySelector('.navbar-nav')\r\n  switch (action.type) {\r\n    case TOGGLE_NAVBAR:\r\n      navbar.classList.toggle('active')\r\n      navbarNav.classList.toggle('active')\r\n      return !state\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default navbarReducer\r\n","import { combineReducers } from 'redux'\nimport navbarReducer from './navbarReducer'\nconst rootReducer = combineReducers({ navbarReducer })\n\nexport default rootReducer\n","import React from 'react'\nimport { HashRouter as Router } from 'react-router-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\n\nimport { Navbar } from './components/Navbar'\nimport { Content } from './components/Content'\nimport rootReducer from './redux/reducers/rootReducer'\nimport { logger } from 'redux-logger'\n\nfunction App() {\n  const store = createStore(rootReducer, applyMiddleware(logger))\n  return (\n    <Provider store={store}>\n      <div className='App container-fluid'>\n        <Router>\n          <Navbar />\n          <Content />\n        </Router>\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'jquery'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}